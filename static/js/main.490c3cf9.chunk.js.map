{"version":3,"sources":["components/CreateTodo.jsx","tools/tools.js","components/TodoItem.jsx","components/TodoItems.jsx","components/ModalWindow.jsx","components/TodoList.jsx","App.js","index.js"],"names":["CreateTodo","todo","submit","useState","task","status","setTask","useEffect","prev","length","className","id","rows","placeholder","onChange","e","target","value","shaded","label","onClick","variant","capitalize","str","toUpperCase","substring","secondsToDhms","seconds","Number","d","Math","floor","h","m","s","TodoItem","num","deleteTask","editTask","markDone","currentTime","text","setText","textDecoration","setTextDecoration","color","useRef","time","progression","deadline","current","taskProgression","startTime","toFixed","style","boxShadow","disabled","size","tooltip","icon","faCheck","faPencilAlt","faTrashAlt","aria-hidden","TodoItems","Date","now","setTimes","interval","setInterval","clearInterval","sortedTodoArr","useCallback","arr","sort","a","b","arrTodoDone","filter","arrTodoInProcess","map","action","setTodoItems","ModalWindow","todoToEdit","modalIsOpened","onModalClose","acceptChangedTodo","todoToChange","setTodoToChange","newDeadline","setNewDeadline","datePickerTime","setMinutes","getMinutes","maxDate","setFullYear","getFullYear","title","isOpen","onRequestClose","html","tagName","formatStyle","locale","alert","minDate","TodoList","setTodo","setModalIsOpened","setTodoToEdit","generateId","idsArr","max","JSON","parse","localStorage","getItem","setItem","stringify","newTask","maxId","renewedTodo","newTodoArray","themes","light","rainbow","palette","brand","success","warning","error","dark","mainBackground","App","theme","setTheme","setValue","backgroundColor","setBackgroundColor","background","position","top","right","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.490c3cf9.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nimport { Card, Textarea, Button } from \"react-rainbow-components\";\r\n\r\nexport function CreateTodo({ todo, submit }) {\r\n    const [task, setTask] = useState({\r\n        task: '', status: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        setTask(prev => {\r\n            return { ...prev, task: '' }\r\n        })\r\n    }, [todo.length]);\r\n\r\n    function inputChange(e) {\r\n        setTask(prev => {\r\n            return { ...prev, task: e.target.value }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"rainbow-p-around_small\">\r\n                <Card className='create-task-box'>\r\n                    <Textarea\r\n                        id=\"example-textarea-1\"\r\n                        rows={1}\r\n                        placeholder=\"Add Task\"\r\n                        className=\"rainbow-m-vertical_x-large rainbow-p-horizontal_medium rainbow-m_auto add-task-textarea\"\r\n                        onChange={inputChange}\r\n                        value={task.task}\r\n                    />\r\n\r\n                    <Button\r\n                        shaded\r\n                        label=\"Add Task\"\r\n                        onClick={() => submit(task)}\r\n                        variant=\"brand\"\r\n                        className=\"rainbow-m-around_medium add-task-button\"\r\n                    />\r\n                </Card>\r\n            </div>\r\n        </>\r\n    )\r\n}","export function capitalize(str) {\r\n    return str[0].toUpperCase() + str.substring(1)\r\n}\r\n\r\nexport function secondsToDhms(seconds) {\r\n    seconds = Number(seconds);\r\n    let d = Math.floor(seconds / (3600 * 24));\r\n    let h = Math.floor(seconds % (3600 * 24) / 3600);\r\n    let m = Math.floor(seconds % 3600 / 60);\r\n    let s = Math.floor(seconds % 60);\r\n\r\n    let dDisplay = d > 0 ? d + (d === 1 ? \" day, \" : \" days, \") : \"\";\r\n    let hDisplay = h > 0 ? h + (h === 1 ? \" hour, \" : \" hours, \") : \"\";\r\n    let mDisplay = m > 0 ? m + (m === 1 ? \" minute, \" : \" minutes, \") : \"\";\r\n    let sDisplay = s > 0 ? s + (s === 1 ? \" second\" : \" seconds\") : \"0 seconds\";\r\n\r\n    return dDisplay + hDisplay + mDisplay + sDisplay;\r\n}","import { useState, useEffect, useRef } from \"react\";\r\n\r\nimport {\r\n    Card,\r\n    ProgressBar,\r\n    ButtonIcon,\r\n} from 'react-rainbow-components';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faTrashAlt,\r\n    faPencilAlt,\r\n    faCheck,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { capitalize, secondsToDhms } from \"../tools/tools\";\r\n\r\nexport function TodoItem({ todo, num, deleteTask, editTask, markDone, currentTime }) {\r\n    const [text, setText] = useState(capitalize(todo.task))\r\n    const [textDecoration, setTextDecoration] = useState('none')\r\n\r\n    const color = useRef('transparent')\r\n    const time = useRef('Waiting...')\r\n    const progression = useRef(0)\r\n\r\n    useEffect(() => {\r\n        setText(capitalize(todo.task))\r\n    }, [todo.task])\r\n\r\n    useEffect(() => {\r\n        if (todo.deadline) {\r\n            time.current = Math.floor((todo.deadline - currentTime) / 1000)\r\n        } else {\r\n            time.current = 'Waiting...'\r\n        }\r\n\r\n    }, [todo.deadline, currentTime])\r\n\r\n    useEffect(() => {\r\n        if (todo.status) {\r\n            color.current = 'green'\r\n            return\r\n        } else if (currentTime > todo.deadline && todo.deadline) {\r\n            color.current = 'red'\r\n            return\r\n        } else {\r\n            color.current = '#4dc9cb'\r\n            return\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (todo.status) {\r\n            setTextDecoration('line-through')\r\n        } else {\r\n            setTextDecoration('none')\r\n        }\r\n    }, [todo.status])\r\n\r\n    useEffect(() => {\r\n        let taskProgression = ((1 - (Math.floor((todo.deadline - currentTime) / 1000) / (Math.floor(todo.deadline / 1000) - Math.floor(todo.startTime / 1000)))) * 100).toFixed()\r\n        if (taskProgression <= 100) {\r\n            progression.current = taskProgression\r\n        } else if (taskProgression > 100) {\r\n            progression.current = 100\r\n        } else if (taskProgression < 0) {\r\n            progression.current = 0\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div className=\"rainbow-m-around_medium\">\r\n                <Card style={{ boxShadow: `0px 0px 7px ${color.current}` }}>\r\n                    <div className=\"rainbow-p-around_medium task-box-inner\">\r\n                        <span className='task-name'>\r\n                            {!todo.status ? `${num}. ` : ''}\r\n                            <span style={{ textDecoration: textDecoration }}>{text}</span>\r\n                        </span>\r\n                        <div className='task-buttons'>\r\n                            <ButtonIcon\r\n                                variant=\"border-filled\"\r\n                                disabled={todo.status}\r\n                                onClick={() => markDone(todo.id)}\r\n                                size=\"medium\"\r\n                                tooltip=\"Mark Done\"\r\n                                icon={<FontAwesomeIcon icon={faCheck} />}\r\n                            />\r\n                            <ButtonIcon\r\n                                variant=\"border-filled\"\r\n                                disabled={todo.status}\r\n                                onClick={() => editTask(todo)}\r\n                                size=\"medium\"\r\n                                tooltip=\"Edit\"\r\n                                icon={<FontAwesomeIcon icon={faPencilAlt} />}\r\n                            />\r\n                            <ButtonIcon\r\n                                variant=\"border-filled\"\r\n                                onClick={() => deleteTask(todo.id)}\r\n                                size=\"medium\"\r\n                                tooltip=\"Delete\"\r\n                                icon={<FontAwesomeIcon icon={faTrashAlt} />}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    {todo.deadline && !todo.status ?\r\n                        <div className=\"rainbow-p-around_x-small\">\r\n\r\n                            <div className='line'></div>\r\n\r\n                            <div className=\"rainbow-align-content_space-between rainbow-p-bottom_x-small\">\r\n                                <span className=\"rainbow-font-size-text_medium\">\r\n                                    {time.current > 0 ? `Time remains: ${secondsToDhms(time.current)}` : typeof (time.current) === 'string' ? time.current : 'Time is out'}\r\n                                </span>\r\n\r\n                                <span aria-hidden=\"true\">\r\n                                    <strong className=\"rainbow-font-size-text_small rainbow-color_brand\">\r\n                                        {progression.current}% of time has past\r\n                                    </strong>\r\n                                </span>\r\n\r\n                            </div>\r\n\r\n                            <ProgressBar value={progression.current} size='small' />\r\n                        </div> : null\r\n                    }\r\n                </Card>\r\n            </div>\r\n        </>\r\n    )\r\n}","import { useCallback, useEffect, useState } from \"react\";\r\n\r\nimport { TodoItem } from \"./TodoItem\";\r\n\r\nexport function TodoItems({ todo, markDone, editTask, deleteTask }) {\r\n    const [time, setTimes] = useState(Date.now())\r\n\r\n    useEffect(() => {\r\n        let interval\r\n        if (time >= 0) {\r\n            interval = setInterval(() => {\r\n                setTimes(Date.now())\r\n            }, 1000)\r\n        }\r\n        return () => clearInterval(interval)\r\n    }, [])\r\n\r\n    const sortedTodoArr = useCallback(() => {\r\n        let arr = [...todo]\r\n\r\n        arr.sort((a, b) => {\r\n            if (!a.deadline) {\r\n                return 1\r\n            } else if (!b.deadline) {\r\n                return - 1\r\n            }\r\n            return a.deadline - b.deadline\r\n        })\r\n\r\n        let arrTodoDone = arr.filter((todo) => todo.status ? todo : null)\r\n        let arrTodoInProcess = arr.filter((todo) => !todo.status ? todo : null)\r\n\r\n        return [...arrTodoInProcess, ...arrTodoDone]\r\n    }, [todo])\r\n\r\n    function setTodoItems() {\r\n        let num = 1\r\n        return sortedTodoArr().map((task) => {\r\n            return (\r\n                <TodoItem\r\n                    markDone={markDone}\r\n                    editTask={editTask}\r\n                    deleteTask={deleteTask}\r\n                    key={task.id}\r\n                    action\r\n                    num={num++}\r\n                    todo={task}\r\n                    currentTime={time}\r\n                />\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {setTodoItems()}\r\n        </div>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport { Modal, Button, DateTimePicker } from 'react-rainbow-components';\r\nimport {\r\n    faCheck,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport ContentEditable from \"react-contenteditable\";\r\n\r\nexport function ModalWindow({ todoToEdit, modalIsOpened, onModalClose, acceptChangedTodo }) {\r\n    const [todoToChange, setTodoToChange] = useState(todoToEdit)\r\n    const [newDeadline, setNewDeadline] = useState(null)\r\n\r\n    let datePickerTime = (new Date())\r\n    datePickerTime.setMinutes((new Date()).getMinutes() + 10)\r\n\r\n    let maxDate = (new Date())\r\n    maxDate.setFullYear((new Date()).getFullYear() + 5)\r\n\r\n    function changeTodo(deadline) {\r\n        if (+deadline < Date.now()) {\r\n            alert('Please try to set time that more than current')\r\n            return\r\n        }\r\n\r\n        setTodoToChange({ ...todoToChange, startTime: Date.now(), deadline: + deadline })\r\n    }\r\n\r\n    function changeTaskName(e) {\r\n        setTodoToChange({ ...todoToChange, task: e.target.value })\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            className='modal-window'\r\n            title=\"Task\"\r\n            size=\"medium\"\r\n            isOpen={modalIsOpened}\r\n            onRequestClose={() => onModalClose()}\r\n        >\r\n            <span className='modal-task-name'>\r\n                <ContentEditable\r\n                    className='name-changer'\r\n                    onChange={changeTaskName}\r\n                    html={todoToChange.task}\r\n                    tagName='article'\r\n                />\r\n            </span>\r\n\r\n            <div className='modal-bottom'>\r\n                <div className='date-picker'>\r\n                    <DateTimePicker\r\n                        value={todoToEdit && todoToEdit.deadline ? new Date(todoToEdit.deadline) : newDeadline}\r\n                        onClick={() => setNewDeadline(datePickerTime)}\r\n                        formatStyle=\"large\"\r\n                        locale=\"en-US\"\r\n                        label=\"Set deadline\"\r\n                        onChange={changeTodo}\r\n                        minDate={(new Date())}\r\n                        maxDate={maxDate}\r\n                    />\r\n                </div>\r\n                <Button variant=\"neutral\"\r\n                    onClick={() => {\r\n                        if (!todoToChange.task) {\r\n                            alert('Name cannot be empty')\r\n                            return\r\n                        }\r\n                        acceptChangedTodo(todoToChange)\r\n                    }}\r\n                    className=\"rainbow-m-around_medium\"\r\n                >\r\n                    Accept changings\r\n                    <FontAwesomeIcon icon={faCheck} className=\"rainbow-m-left_medium\" />\r\n                </Button>\r\n            </div>\r\n\r\n        </Modal>\r\n    )\r\n}","import { useState, useEffect } from \"react\";\r\nimport { Card } from 'react-rainbow-components';\r\nimport { CreateTodo } from \"./CreateTodo\";\r\nimport { TodoItems } from \"./TodoItems\";\r\nimport { ModalWindow } from \"./ModalWindow\";\r\n\r\nexport function TodoList() {\r\n    const [todo, setTodo] = useState([])\r\n    const [modalIsOpened, setModalIsOpened] = useState(false)\r\n    const [todoToEdit, setTodoToEdit] = useState()\r\n\r\n    useEffect(() => {\r\n        setTodo(JSON.parse(localStorage.getItem('todo')))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('todo', JSON.stringify(todo))\r\n    }, [todo])\r\n\r\n    function editTask(todo) {\r\n        setTodoToEdit(todo)\r\n        setModalIsOpened(true)\r\n    }\r\n\r\n    function deleteTask(id) {\r\n        let arr = todo.filter(todo => {\r\n            return todo.id !== id\r\n        })\r\n        setTodo(arr)\r\n    }\r\n\r\n    function markDone(id) {\r\n        setTodo(todo.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.deadline = ''\r\n                todo.status = !todo.status\r\n            }\r\n            return todo\r\n        }))\r\n    }\r\n\r\n    function createTask(newTask) {\r\n        if (newTask.task) {\r\n            let maxId\r\n            if (todo.length) {\r\n                let idsArr = todo.map((todo) => todo.id)\r\n                maxId = Math.max(...idsArr)\r\n            } else {\r\n                maxId = 1\r\n            }\r\n            // newTask.deadline = ''\r\n            newTask.id = maxId + 1\r\n\r\n            setTodo([...todo, { ...newTask, id: generateId() }])\r\n        }\r\n    }\r\n\r\n    function generateId() {\r\n        if (todo.length) {\r\n            let idsArr = todo.map((todo) => todo.id)\r\n            return Math.max(...idsArr) + 1\r\n        }\r\n        return 1\r\n    }\r\n\r\n    function changeTodo(renewedTodo) {\r\n        let newTodoArray = todo.filter(todo => todo.id !== todoToEdit.id)\r\n        setTodo([...newTodoArray, renewedTodo])\r\n        setModalIsOpened(false)\r\n    }\r\n\r\n    function onModalClose() {\r\n        setModalIsOpened(false)\r\n    }\r\n\r\n    return (\r\n        <div className='todo-list'>\r\n\r\n            <div className=\"rainbow-p-around_small\">\r\n                <Card className='create-task-box'>\r\n                    <h1>Task List</h1>\r\n                </Card>\r\n            </div>\r\n\r\n            <CreateTodo\r\n                todo={todo}\r\n                submit={createTask}\r\n            />\r\n\r\n            <TodoItems\r\n                todo={todo}\r\n                markDone={markDone}\r\n                editTask={editTask}\r\n                deleteTask={deleteTask}\r\n                action\r\n            />\r\n\r\n            {modalIsOpened ?\r\n                <ModalWindow\r\n                    todoToEdit={todoToEdit}\r\n                    modalIsOpened={modalIsOpened}\r\n                    onModalClose={onModalClose}\r\n                    acceptChangedTodo={changeTodo}\r\n                />\r\n                : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import { useState } from 'react';\nimport { Application } from 'react-rainbow-components';\nimport { CheckboxToggle } from 'react-rainbow-components';\nimport { TodoList } from \"./components/TodoList\";\n\n\nconst themes = {\n    light: {\n        rainbow: {\n            palette: {\n                brand: \"#fa9a4c\",\n                success: \"#f2707a\",\n                warning: \"#F7DB62\",\n                error: \"#f2707a\"\n            }\n        }\n    },\n    dark: {\n        rainbow: {\n            palette: {\n                mainBackground: \"#212121\",\n                brand: \"#4dc9cb\",\n                success: \"#98D38C\",\n                warning: \"#F7DB62\",\n                error: \"#f2707a\"\n            }\n        }\n    }\n};\n\nfunction App() {\n    const [theme, setTheme] = useState('dark')\n    const [value, setValue] = useState('true')\n    const [backgroundColor, setBackgroundColor] = useState('#212121')\n\n    function changeTheme() {\n        if (theme === 'dark') {\n            setTheme('light')\n            setValue(false)\n            setBackgroundColor('white')\n        } else {\n            setTheme('dark')\n            setValue(true)\n            setBackgroundColor('#212121')\n        }\n    }\n\n    return (\n        <Application className=\"app\" style={{ background: backgroundColor }} theme={themes[theme]}>\n            <CheckboxToggle\n                style={{ position: 'absolute', top: 20, right: 100 }}\n                label=\"Switch Theme\"\n                value={value}\n                onChange={changeTheme}\n            />\n            <TodoList />\n        </Application>\n    );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}